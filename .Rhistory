print(employee)
employee[1] = 'John2'
employee = list(Name='John', Position='cashier', Salary=9.50)
employee$Position = 'manager'
print(employee)
employee[1] = 'John2'
print(employee)
employee = list(Name='John', Position='cashier', Salary=9.50)
employee$Position = 'manager'
print(employee)
employee[1] = 'John2'
print(employee)
employee -> 'John3''manager1''10.50'
print(employee)
employee -> 'John3','manager1','10.50'
print(employee)
employee -> 'John3','manager1','10.50'
print(employee)
employee$Name = NULL
print(employee)
vt1 = [1, 2, 3]
vt2 = ['Sam', 'Steve', 'Sunny']
vt3 = [T, F, F]
df = data.frame(vt1, vt2, vt3)
vt1 = [1, 2, 3]
vt2 = ['Sam', 'Steve', 'Sunny']
vt3 = [T, F, F]
vt1 = c(1, 2, 3)
vt2 = c('Sam', 'Steve', 'Sunny')
vt3 = c(T, F, F)
df = data.frame(vt1, vt2, vt3)
df
df[1, ]
df[, 2]
df[3, 2]
df[3,3]
colnames(df)= c('one','two','three')
df
df1 <- data.frame(vt1,vt2,vt3, row.naes=c(0,1,2))
df1
df1 <- data.frame(vt1,vt2,vt3, row.names=c(0,1,2))
df1
str(df1)
df[order(df$two, descending=TRUE)]
df
df[order(df$two, descending=TRUE)]
df[order(df$one, descending=TRUE)]
df[order(df$'one', descending=TRUE)]
df[order(df$one)]
df[order(-df$one)]
df[order(df$one)]
df[order(df$one, descending=T)]
df[order(df$one, descending=F)]
df[order(df$one, decreasing=F)]
df[order(df$one, decreasing=T)]
df[order(-one)]
df[order(-df$one)]
df[order(-df$three)]
df[order(-df$two)]
mat = matrix(1:6, 2, 3)
apply(mat, 1, sum)
mat
apply(mat, 2, sum)
library(ggplot2)
library(dplyr)
select(df1, 'one')
select(df, 'one')
select(df, 1)
select(df, one=ONE)
select(df, one='ONE')
select(df, 'ONE'=one)
x = rnorm(10)
y = sample(x, size = 5, relplace=F)
y = sample(x, size = 5, replace=F)
z = mean(x) - mean(y)
year = 1990:2000
length(year)
sex = c(b, g, g, b, b, b, g, b, g, b, g)
sex = c('b', 'g', 'g', 'b', 'b', 'b', 'g', 'b', 'g', 'b', 'g')
births = data.frame(year, sex)
births
filter(births, sex == 'g', year %in% 1995:2000)
filter(births, sex == 'g' & year %in% 1995:2000)
filter(births, sex == 'g' & (year %in% 1995:2000))
filter(births, sex == 'g' & (year %in% 1995))
filter(births, sex == 'g' & year %in% c(1995:2000))
filter(births, sex == 'g')
births
filter(births, sex == 'g')
filter(births, 'sex' == 'g')
select(births, sex == 'g')
Filter(births, sex == 'g')
filter(births, sex == 'g')
values = c(1, 2, 3, 4, 5)
colors = c('blue','green','blue','blue','green')
example = data.frame(values, colors)
filter(df, color == 'blue')
filter(example, color == 'blue')
filter(example, colors == 'blue')
example1 = filter(example, colors == 'blue')
example1
test = c(1990:2000)
test
library(ggplot2)
data(diamonds)
head(ggplot2::diamonds)
library(dplyr)
births
filter(births, sex == 'g')
filter(births, sex == 'g' & year %in% c(1995:2000))
diamonds_best = (diamonds, color == 'D' & clarity='IF')
diamonds_best = (diamonds, color == 'D' & clarity=='IF')
diamonds_best = (diamonds, color == 'D' & clarity=='IF')
diamonds_best = (diamonds, color == 'D' & clarity == 'IF')
diamonds_best = (diamonds color == 'D' & clarity == 'IF')
diamonds_best = (diamonds, color == 'D' & clarity == 'IF')
dia = filter(diamonds, clarity =='IF')
dia = filter(diamonds, clarity =='IF' & color=='D')
dia2 = filter(diamonds, color=='D' & clarity=='IF')
by_cut = group_by(dia2)
by_cut
by_cut = group_by(dia2, cut)
by_cut
dia %>% mutate(. , ppc = price/carat)
dia_a = dia %>% mutate(. , ppc = price/carat)
dia_a
by_cut = group_by(dia_a, cut)
by_cut
summarise(by_cut,avg = mean(ppc))
summarise(by_cut,mean(ppc))
dia1 = dia %>% mutate(dia, ppc = price/carat)
dia1 = dia %>% mutate(. , ppc = price/carat)
by_cut = group_by(dia1, cut)
summarise(by_cut, mean(ppc))
summarise(by_cut, ppc)
summarise(by_cut, mean(ppc))
head(dia1)
dia2 = summarise(by_cut, mean(ppc))
ggplot(data=dia2, aes(mean(ppc)) + geom_bar(aes(fill=mean(ppc)))
library(ggplot2)
library(dplyr)
data(diamonds)
head(ggplot2::diamonds)
dia = filter(diamonds, clarity =='IF' & color=='D')
dia1 = dia %>% mutate(. , ppc = price/carat)
by_cut = group_by(dia1, cut)
dia2 = summarise(by_cut, mean(ppc))
dia2
ggplot(data=dia2, aes(x=cut, y=mean(ppc))
+ geom_bar(stat = "identity")
q()
+ geom_bar(aes(fill = cut))
ggplot(data=dia2, aes(x=cut, y=mean(ppc))
+ geom_bar(aes(fill = cut))
q()
ggplot(data=dia2, aes(x=cut, y='mean(ppc)')
+ geom_bar(aes(fill = cut))
q()
dia2 = summarise(by_cut, y=mean(ppc))
dia2
+ geom_bar(aes(fill = cut))
ggplot(data=dia2, aes(x=cut, y=y)
+ geom_bar(aes(fill = cut))
q()
ggplot(data=dia2, aes(x=cut, y=y))
ggplot(data=dia2, aes(x=cut, y=y))+ geom_bar (aes(fill = cut))
ggplot(data=dia2, aes(x=cut, y=y))+ geom_bar (aes(fill = cut))
ggplot(data=dia1, aes(x=cut, y = ppc))+ stat_summary(fun.y="mean", geom="bar")
dia2
diamonds_best = filter(diamonds, color=='D' & clarity=='IF')
diamonds_price = diamonds_best %>% mutate(., ppc = price/carat)
by_cut = group_by(diamonds_price, cut)
diamonds_summary = summarise(by_cut, mean(ppc))
diamonds_summary
diamonds_bar = ggplot(data=diamonds_price, aes(x=cut, y = ppc))+ stat_summary(fun.y="mean", geom="bar")
print(diamonds_bar)
install.packages('dplyr')
install.packages('ggplot2')
install.packages('rmarkdown')
install.packages('knitr')
install.packages('data.table')
install.package("pandoc")
Sys.getenv("RSTUDIO_PANDOC")
library(dplyr)
library(plyr)
log(100, 10)
3**2
x = 5.5
as.character(x)
class(x)
#vector
v1 = c('ab',3)
class(v1)
v1+v1
c(v1,v1)
seq(1,10)
c(seq(1,10))
1:10
range(1,10)
range(1, 11)
?range
x = c(1,2,3,4)
x[1]
x[1:3]
x[c(1:4)]
length(x)
y =c('a','b','c','d')
length(y)
y[length(y)]
?lm
ls()
rm(list = ls())
city = c('Seattle', 'Chicago', 'Boston', 'Houston')
temp = c(78, 74, 50, 104)
citydf = data.frame(city, temp)
citydf
colnames(citydf) = c('CITY','TEMP')
citydf
rownames(citydf) = c('a','b','c','d')
citydf
citydf['a']
citydf[a]
citydf[1]
citydf[1,]
citydf['b',]
citydf['c',,drop=F]
citydf[,1,drop=F]
citydf$CITY
citydf$num=c(1,2,3,4)
citydf
citydf$num = NULL
citydf
mean(citydf$temp)
mean(citydf$TEMP)
colname(citydf) = c('city','temp')
colnames(citydf) = c('city','temp')
avgtemp = mean(citydf$temp)
citydf[citydf$temp > avgtemp]
citydf[citydf$temp > avgtemp, ]
dim(citydf)
str(citydf)
employee = list('John', Position='cashier', Salary=9.50)
class(employee)
View(employee)
View(citydf)
test2
test2 = 'Names <- "John Andrew Thomas"'
test2vec = strsplit(test2, ' ')[[1]]
test2vec
test2vec[i]
test2vec[j]
grep(", test2vec)
df
ggplot(names3, aes(x=firstlet)) + geom_bar(aes(fill=firstlet))
libary(ggplot2)
library(ggplot2)
names3 <- names2%>%group_by(firstlet)
yob2014 <- read.csv('yob2014.txt',header=FALSE)
colnames(yob2014) <- c('name', 'sex', 'number')
#1
gnames <- yob2014%>%filter(str_detect(name,"^G"))
length(unique(knames$name))
install.packages(googleVis)
install.packages('googleVis')
library(googleVis)
demo(googleVIs)
demo(googleVis)
demo(googleVis)
View(mtcars)
?givisScatterChart
?gvisScatterChart
dt <- mtcars[,c('wt','mpg')]
scatter = gvisScatterChart(dt)
scatter
#Need to nest in  the built in Python function, plot( )
plot(scatter)
unique(mtcars$cyl)
View(dt)
dt$cyl.4 = ifelse(mtcars$cyl==4, dt$mpg, NA)
View(dt)
dt$cyl.6 = ifelse(mtcars$cyl==6, dt$mpg, NA)
dt$cyl.8 = ifelse(mtcars$cyl==8, dt$mpg, NA)
View(dt)
dt$mpg = NULL
scatter=gvisScatterChart(dt)
plot(scatter)
View(dt)
#Options need to be in a list
my_options <- list(width="600px", height="300px", title="Motor Trend Car Road Tests",
hAxis="{title:'Weight (1000 lbs)'}",
vAxis="{title:'Miles/(US) gallon'}")
scatter=gvisScatterChart(dt,my_options)
plot(scatter)
#Options need to be in a list
my_options <- list(width="600px", height="300px", title="Motor Trend Car Road Tests",
hAxis="{title:'Weight (1000 lbs)', titleTextStyle:{color:'#FF000'}}",
vAxis="{title:'Miles/(US) gallon'}")
scatter=gvisScatterChart(dt,my_options)
plot(scatter)
#Options need to be in a list
my_options <- list(width="600px", height="300px", title="Motor Trend Car Road Tests",
hAxis="{title:'Weight (1000 lbs)'}",
vAxis="{title:'Miles/(US) gallon'}")
scatter=gvisScatterChart(dt,my_options)
plot(scatter)
#Options need to be in a list
my_options <- list(width="600px", height="300px", title="Motor Trend Car Road Tests",
hAxis="{title:'Weight (1000 lbs)'}",
vAxis="{title:'Miles/(US) gallon'}",
dragToPan="{explorer:{axis:'horizontal'}}")
scatter=gvisScatterChart(dt,my_options)
plot(scatter)
#Options need to be in a list
my_options <- list(width="600px", height="300px", title="Motor Trend Car Road Tests",
hAxis="{title:'Weight (1000 lbs)'}",
vAxis="{title:'Miles/(US) gallon'}",
explorer="{actions:['dragToZoom','rightclickToReset']}")
scatter=gvisScatterChart(dt,my_options)
plot(scatter)
#Options need to be in a list
my_options <- list(width="600px", height="300px", title="Motor Trend Car Road Tests",
hAxis="{title:'Weight (1000 lbs)'}",
vAxis="{title:'Miles/(US) gallon'}",
explorer="{actions:['dragToZoom','rightClickToReset']}")
#Modify the popup as name of car instead of coordinates
explorer:"{actions:['dragToZoom', 'rightClickToReset']}"
#Modify the popup as name of car instead of coordinates
scatter=gvisScatterChart(dt,my_options)
plot(scatter)
#Modify the popup as name of car instead of coordinates
#Need to have
dt1 <- mtcars[,c('wt','mpg')]
#Modify the popup as name of car instead of coordinates
#Need to have the tooltip (name of car) in the column right after
dt1 <- mtcars[,c('wt','mpg')]
dt1$cyl.4 = ifelse(mtcars$cyl==4, dt$mpg, NA)
dt1$cyl.4.tooltip = rownames(mtcars)
dt1$cyl.6 = ifelse(mtcars$cyl==6, dt$mpg, NA)
dt1$cyl.6.tooltip = rownames(mtcars)
dt1$cyl.8 = ifelse(mtcars$cyl==8, dt$mpg, NA)
dt1$cyl.8.tooltip = rownames(mtcars)
View(dt1)
dt1$cyl.4 = ifelse(mtcars$cyl==4, dt1$mpg, NA)
dt1$cyl.4.tooltip = rownames(mtcars)
dt1$cyl.6 = ifelse(mtcars$cyl==6, dt1$mpg, NA)
dt1$cyl.6.tooltip = rownames(mtcars)
dt1$cyl.8 = ifelse(mtcars$cyl==8, dt1$mpg, NA)
dt1$cyl.8.tooltip = rownames(mtcars)
View(dt1)
#Modify the popup as name of car instead of coordinates
#Need to have the tooltip (name of car) in the column right after
dt1 <- mtcars[,c('wt','mpg')]
dt1$cyl.4 = ifelse(mtcars$cyl==4, dt1$mpg, NA)
dt1$cyl.4.tooltip = rownames(mtcars)
dt1$cyl.6 = ifelse(mtcars$cyl==6, dt1$mpg, NA)
dt1$cyl.6.tooltip = rownames(mtcars)
dt1$cyl.8 = ifelse(mtcars$cyl==8, dt1$mpg, NA)
dt1$cyl.8.tooltip = rownames(mtcars)
View(dt1)
scatter1=gvisScatterChart(dt1, my_options)
plot(scatter)
plot(scatter1)
################ LeafLet ###########################
install.packages("devtools")
devtools::install_github("rstudio/leaflet")
library(devtools)
devtools::install_github("rstudio/leaflet")
library(devtools)
library(devtools)
install.packages("devtools")
################ LeafLet ###########################
library(devtools)
devtools::install_github("rstudio/leaflet")
install.packages("devtools")
################ LeafLet ###########################
library(devtools)
library(SplitR)
apt-get -y build-dep libcurl4-gnutls-dev
devtools::install_github("r-lib/devtools")
################ LeafLet ###########################
install.packages("devtools")
install.packages("git2r")
install.packages(c("askpass", "backports", "BH", "bit", "blob", "boot", "broom", "callr", "caret", "caTools", "cli", "clipr", "cluster", "curl", "data.table", "DBI", "dbplyr", "digest", "dplyr", "evaluate", "fansi", "foreach", "foreign", "formatR", "fs", "glmnet", "gower", "haven", "hexbin", "hms", "htmlwidgets", "httpuv", "httr", "ipred", "IRkernel", "iterators", "KernSmooth", "lava", "markdown", "MASS", "Matrix", "mgcv", "mime", "ModelMetrics", "modelr", "mongolite", "nlme", "numDeriv", "odbc", "openssl", "pillar", "pkgconfig", "plyr", "prettyunits", "processx", "prodlim", "profvis", "progress", "quantmod", "R6", "Rcpp", "RCurl", "recipes", "repr", "reprex", "RJSONIO", "rsconnect", "rvest", "scales", "selectr", "shiny", "sparklyr", "SQUAREM", "stringi", "survival", "sys", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "TTR", "whisker", "xfun", "xml2", "xts", "zoo"))
devtools::install_github("rstudio/leaflet")
install.packages("devtools")
fib = function(limit) {
i = 2
x = c(1, 2)
fib_sum = 0
while (x[i] < limit) {
if(x[i] %% 2 == 0){
fib_sum = fib_sum + x[i]
}
x[i+1] = x[i] + x[i-1]
i = i + 1
}
return(fib_sum)
}
fib1 = fib(4e6)
fib1 = fib(4e6)
fib1
matmul = function(mat, vec){
zeros = matrix(0, nrow(mat), 1)
i = 1
for (row in 1:nrow(mat)){
x  = sum(mat[row,]*vec)
zeros[i] = x
i = i + 1
}
return(zeros)
}
########## Sammy Solution
mat_times_vec = function(mat, vec){
stopifnot(is.matrix(mat), is.numeric(vec), length(vec) > 0, ncol(mat) == length(vec))
row_count = nrow(mat)
result = numeric(row_count)
for (i in 1:row_count){
result[i] = sum(mat[i,]*vec)
}
return(result)
}
matrixA = matrix(1:12, 3, 4)
vectorB = c(1:4)
mat_times_vec(matrixA, vectorB)
matmul(matrixA, vectorB)
mad(v)
v = rnorm(10)
mad(v)
cat(v)
v
name_email = function(entry){
entryvec = strsplit(test, '')[[1]]
y = length(entryvec) - 1
names = strsplit(paste(entryvec[c(11:y)], collapse=''), " ")[[1]]
emails = paste(names, c('@gmail.com'), sep='')
return(emails)
}
###### Solution ####
Names <- "John Andrew Thomas"
name <- strsplit(Names, split=' ')[[1]]
paste(name,"gmail.com", sep='@')
paste(name,"gmail.com", sep='@', collapse=;)
name_email = function(entry){
entryvec = strsplit(test, '')[[1]]
y = length(entryvec) - 1
names = strsplit(paste(entryvec[c(11:y)], collapse=''), " ")[[1]]
emails = paste(names, c('@gmail.com'), sep='')
return(emails)
}
###### Solution ####
Names <- "John Andrew Thomas"
name <- strsplit(Names, split=' ')[[1]]
paste(name,"gmail.com", sep='@', collapse=';')
paste(name,"gmail.com", sep='@', collapse=';')
paste(name,"gmail.com", sep='@', collapse='; ')
v1 = c('a', 'b', 'c', 'd', 'e')
v2 = rep(v1, each=5)
paste(v1, v2, sep='')
shiny::runApp('Downloads/flights/flights_final')
runApp('Downloads/flights/flights_final')
runApp('Downloads/flights/flights_final')
shiny::runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
vec_w <- as.numeric(unlist(strsplit(input$weights,",")))
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp()
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
library(reshape2)
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
runApp('Desktop/NYCDSA_Proj/Shiny/project')
shiny::runApp('Desktop/NYCDSA_Proj/etf_shiny')
shiny::runApp('Desktop/NYCDSA_Proj/etf_shiny copy')
setwd("~/Desktop/NYCDSA_Proj/etf_shiny")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
